{"version":3,"file":"static/js/33.4fb0e13c.chunk.js","mappings":"mQAEaA,GAAWC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAY,wMAUvBE,GAAUF,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAY,wJAQtBG,EAAYH,EAAAA,EAAAA,IAAU,4DAItBI,EAAQJ,EAAAA,EAAAA,IAAU,+CAGlBK,EAAOL,EAAAA,EAAAA,EAAQ,4CAGfM,EAAON,EAAAA,EAAAA,KAAW,+DAIlBO,EAAUP,EAAAA,EAAAA,IAAU,+CAGpBQ,EAAOR,EAAAA,EAAAA,GAAS,8E,SCvBd,SAASS,IAAgB,IAAD,QAC/BC,GAAWC,EAAAA,EAAAA,MACTC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAAK,eAAzCC,EAAS,KAAEC,EAAY,KAC9B,GAA0BF,EAAAA,EAAAA,UAAS,MAAK,eAAjCG,EAAK,KAAEC,EAAQ,KAGhBC,EAAmC,QAAvB,EAAiB,QAAjB,EAAGT,EAASU,aAAK,aAAd,EAAgBC,YAAI,QAAI,IAM7C,IALAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAYX,GACTY,MAAK,SAAAC,GAAI,OAAIT,EAAaS,EAAK,IAC/BC,OAAM,SAAAT,GAAK,OAAIC,EAASD,EAAM,GACnC,GAAG,CAACL,KACCG,EACH,OAAO,KAET,IACEY,EAOEZ,EAPFY,YACAC,EAMEb,EANFa,MACAC,EAKEd,EALFc,eACAC,EAIEf,EAJFe,aACAC,EAGEhB,EAHFgB,aACAC,EAEEjB,EAFFiB,SACAC,EACElB,EADFkB,OAEF,OACE,4BACE,SAAClC,EAAQ,CAACmC,GAAIf,EAAa,SAAC,YAC3BF,IAAS,uBAAG,2DACZF,IACC,UAACZ,EAAS,YACR,SAACC,EAAK,CAAC+B,IAzBE,mCAyBcR,EAAaS,IAAKR,KACzC,4BACE,0BACGC,EAAe,KAAGC,EAAaO,MAAM,EAAG,GAAG,OAE7CN,EAAe,IACd,UAAC1B,EAAI,WAAC,eAAaiC,KAAKC,MAAqB,GAAfR,GAAmB,QAGnD,UAAC1B,EAAI,WAAC,cACM,SAACC,EAAI,UAAE0B,QAEnB,UAAC3B,EAAI,WAAC,UACI,KACR,SAACC,EAAI,UACF2B,EAAOO,KAAI,WAAWC,GAAK,IAAbC,EAAI,EAAJA,KAAI,OACjB,SAACpC,EAAI,UAAcoC,GAARD,EAAoB,gBAO3C,UAAClC,EAAO,YACN,SAACD,EAAI,UAAC,4BACN,2BACE,SAACE,EAAI,WACH,SAACN,EAAO,CAACgC,GAAG,OAAOd,MAAO,CAAEC,KAAoB,QAAhB,EAAEX,EAASU,aAAK,aAAd,EAAgBC,MAAO,SAAC,YAI5D,SAACb,EAAI,WACH,SAACN,EAAO,CAACgC,GAAG,UAAUd,MAAO,CAAEC,KAAoB,QAAhB,EAAEX,EAASU,aAAK,aAAd,EAAgBC,MAAO,SAAC,qBAMnE,SAAC,KAAM,MAGb,C","sources":["pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nexport const BackLink = styled(Link)`\n  display: inline-flex;\n  margin-top: 10px;\n  margin-left: 10px;\n  color: #959794;\n  text-decoration-color: rgba(233, 50, 46, 0.3);\n  &:hover {\n    color: #e9322e;\n  }\n`;\nexport const AddLink = styled(Link)`\n  color: #959794;\n  text-decoration-color: rgba(233, 50, 46, 0.3);\n  font-size: 16px;\n  &:hover {\n    color: #e9322e;\n  }\n`;\nexport const Container = styled.div`\n  padding: 40px;\n  display: flex;\n`;\nexport const Image = styled.img`\n  margin-right: 32px;\n`;\nexport const Text = styled.p`\n  font-size: 20px;\n`;\nexport const Info = styled.span`\n  display: block;\n  font-size: 16px;\n`;\nexport const AddInfo = styled.div`\n  padding-left: 40px;\n`;\nexport const Item = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getInfoById } from 'API_Services/moviesdbAPI';\nimport {\n  BackLink,\n  Container,\n  Image,\n  Text,\n  Info,\n  AddInfo,\n  AddLink,\n  Item,\n} from './MovieDetails.styled';\nexport default function MovieDetails() {\n  const location = useLocation();\n  const { movieId } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [error, setError] = useState(null);\n\n  const imageUrl = 'https://image.tmdb.org/t/p/w300/';\n  const backLinkHref = location.state?.from ?? '/';\n  useEffect(() => {\n    getInfoById(movieId)\n      .then(info => setMovieInfo(info))\n      .catch(error => setError(error));\n  }, [movieId]);\n  if (!movieInfo) {\n    return null;\n  }\n  const {\n    poster_path,\n    title,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = movieInfo;\n  return (\n    <div>\n      <BackLink to={backLinkHref}>Go back</BackLink>\n      {error && <p>Something went wrong. Please, try again in few minutes</p>}\n      {movieInfo && (\n        <Container>\n          <Image src={imageUrl + poster_path} alt={title}></Image>\n          <div>\n            <h1>\n              {original_title} ({release_date.slice(0, 4)})\n            </h1>\n            {vote_average > 0 && (\n              <Text>User score: {Math.round(vote_average * 10)}%</Text>\n            )}\n\n            <Text>\n              Overview: <Info>{overview}</Info>\n            </Text>\n            <Text>\n              Genres:{' '}\n              <Info>\n                {genres.map(({ name }, index) => (\n                  <Info key={index}>{name}</Info>\n                ))}\n              </Info>\n            </Text>\n          </div>\n        </Container>\n      )}\n      <AddInfo>\n        <Info>Additional information</Info>\n        <ul>\n          <Item>\n            <AddLink to=\"cast\" state={{ from: location.state?.from }}>\n              Cast\n            </AddLink>\n          </Item>\n          <Item>\n            <AddLink to=\"reviews\" state={{ from: location.state?.from }}>\n              Reviews\n            </AddLink>\n          </Item>\n        </ul>\n      </AddInfo>\n      <Outlet />\n    </div>\n  );\n}\nMovieDetails.propTypes = {\n  movieInfo: PropTypes.shape({\n    poster_path: PropTypes.string,\n    title: PropTypes.string,\n    original_title: PropTypes.string,\n    release_date: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n      })\n    ),\n  }),\n};\n"],"names":["BackLink","styled","Link","AddLink","Container","Image","Text","Info","AddInfo","Item","MovieDetails","location","useLocation","movieId","useParams","useState","movieInfo","setMovieInfo","error","setError","backLinkHref","state","from","useEffect","getInfoById","then","info","catch","poster_path","title","original_title","release_date","vote_average","overview","genres","to","src","alt","slice","Math","round","map","index","name"],"sourceRoot":""}